name: Debug a test at given location

on:
  repository_dispatch:
    types:
      - debug_test_by_location


env:
  GIT_TOKEN: ${{ secrets.GH_SECURITY_TOKEN }}
  AWS_DEFAULT_REGION: 'us-east-1'
  
  JIRA_USER: ${{ secrets.JIRA_USER }}
  JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}
  JIRA_BOARD_ID: 'XX'
  SAMPLE_SLACK_WEBHOOK: ${{ secrets.SAMPLE_SLACK_WEBHOOK }}
  TEST_ENV: 'int'
  PROJECT_NAME: 'sample'
  BROWSER: ${{ github.event.client_payload.BROWSER || 'chromeHeadless' }}
  LOG_LEVEL: ${{ github.event.client_payload.LOG_LEVEL || 'debug' }}
  TEST_LOCATION: ${{ github.event.client_payload.TEST_LOCATION || 'not set' }}

jobs:
  debug_test_by_location:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      deploy_to_uat: ${{ steps.setup_env_and_check_payload.outputs.deploy_to_uat }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Ruby version with RVM and install gems with cache
        uses: ruby/setup-ruby@v3
        with:
          ruby-version: '3.4.4'
          bundler-cache: true

      - name: configure aws credentials
        id: int_creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{secrets.INT_AWS_ACCOUNT}}:role/${{secrets.INT_AWS_ROLE}}
          aws-region: ${{ secrets.AWS_REGION }}
          output-credentials: true

      - name: Setting AWS ENV variables
        run: |
          echo AWS_ACCESS_KEY_ID="${{ steps.int_creds.outputs.aws-access-key-id }}" >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY="${{ steps.int_creds.outputs.aws-secret-access-key }}" >> $GITHUB_ENV
          echo AWS_SESSION_TOKEN="${{ steps.int_creds.outputs.aws-session-token }}" >> $GITHUB_ENV
          echo INT_AWS_ACCESS_KEY_ID="${{ steps.int_creds.outputs.aws-access-key-id }}" >> $GITHUB_ENV
          echo INT_AWS_SECRET_ACCESS_KEY="${{ steps.int_creds.outputs.aws-secret-access-key }}" >> $GITHUB_ENV
          echo INT_AWS_SESSION_TOKEN="${{ steps.int_creds.outputs.aws-session-token }}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22


      - name: Setup the environment for UI headless test in Ubuntu and Check client_payload values
        id: setup_env_and_check_payload
        run: |
          source scripts/source_all.sh
          download_data_setup_folder
          echo "## **Workflow Input:**" >> "$GITHUB_STEP_SUMMARY"
          echo "#### **TEST_LOCATION**: $TEST_LOCATION" >> "$GITHUB_STEP_SUMMARY"
          echo "#### **BROWSER**: $BROWSER" >> "$GITHUB_STEP_SUMMARY"
          echo "#### **LOG_LEVEL**: $LOG_LEVEL" >> "$GITHUB_STEP_SUMMARY"
          setup_ubuntu_headless
          if [[ "$BROWSER" == 'chromeHeadless' ]]; then install_chrome_browser; fi

      - name: Setup geckodriver
        if: ${{ env.BROWSER == 'firefoxHeadless' }}
        uses: browser-actions/setup-geckodriver@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: install MS Edge
        if: ${{ env.BROWSER == 'edge' }}
        uses: browser-actions/setup-edge@v1

      - name: Run test
        run: |
          source scripts/source_all.sh
          npm install
          ci_cuc_setup_results_directory
          setup_nightwatch "test_config/int_ci.sh" "$BROWSER"
          ci_cuc_run_by_location "$TEST_LOCATION"
